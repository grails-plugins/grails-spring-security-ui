Most aspects of the plugin are configurable.

h4. @s2ui-override@ script

The plugin's controllers and GSPs are easily overridden using the @s2ui-override@ script. The general syntax for running the script is

{code}
grails s2ui-override <type> <controller-package>
{code}

The script will copy an empty controller that extends the corresponding plugin controller into your application so you can override individual actions and methods as needed. It also copies the controller's GSPs. The exceptions are 'auth' and 'layout' which only copy GSPs.

The files copied for each type are summarized here:

* aclclass
** @controller/AclClassController.groovy@
** @views/aclClass/create.gsp@
** @views/aclClass/edit.gsp@
** @views/aclClass/search.gsp@

* aclentry
** @controller/AclEntryController.groovy@
** @views/aclEntry/create.gsp@
** @views/aclEntry/edit.gsp@
** @views/aclEntry/search.gsp@

* aclobjectidentity
** @controller/AclObjectIdentityController.groovy@
** @views/aclObjectIdentity/create.gsp@
** @views/aclObjectIdentity/edit.gsp@
** @views/aclObjectIdentity/search.gsp@

* aclsid
** @controller/AclSidController.groovy@
** @views/aclSid/create.gsp@
** @views/aclSid/edit.gsp@
** @views/aclSid/search.gsp@

* auth
** @views/login/auth.gsp@

* layout
** @views/layouts/springSecurityUI.gsp@
** @views/includes/_ajaxLogin.gsp@

* persistentlogin
** @controller/PersistentLoginController.groovy@
** @views/persistentLogin/edit.gsp@
** @views/persistentLogin/search.gsp@

* register
** @controller/RegisterController.groovy@
** @views/register/forgotPassword.gsp@
** @views/register/index.gsp@
** @views/register/resetPassword.gsp@

* registrationcode
** @controller/RegistrationCodeController.groovy@
** @views/registrationCode/edit.gsp@
** @views/registrationCode/search.gsp@

* requestmap
** @controller/RequestmapController.groovy@
** @views/requestmap/create.gsp@
** @views/requestmap/edit.gsp@
** @views/requestmap/search.gsp@

* role
** @controller/RoleController.groovy@
** @views/role/create.gsp@
** @views/role/edit.gsp@
** @views/role/search.gsp@

* securityinfo
** @controller/SecurityInfoController.groovy@
** @views/securityInfo/config.gsp@
** @views/securityInfo/currentAuth.gsp@
** @views/securityInfo/filterChain.gsp@
** @views/securityInfo/logoutHandlers.gsp@
** @views/securityInfo/mappings.gsp@
** @views/securityInfo/providers.gsp@
** @views/securityInfo/usercache.gsp@
** @views/securityInfo/voters.gsp@

* user
** @controller/UserController.groovy@
** @views/user/create.gsp@
** @views/user/edit.gsp@
** @views/user/search.gsp@

h4. I18N

Most of the plugin's displayed strings are localized and stored in the plugin's @grails-app/i18n/messages.spring-security-ui.properties@ file. You can override any of these values by putting an override in your application's @grails-app/i18n/messages.properties@ file.

h4. @Config.groovy@ attributes

There are a few configuration options specified in @DefaultUiSecurityConfig.groovy@ that can be overridden in your application's @grails-app/conf/Config.groovy@

* grails.plugin.springsecurity.ui.register.emailBody
* grails.plugin.springsecurity.ui.register.emailFrom
* grails.plugin.springsecurity.ui.register.emailSubject
* grails.plugin.springsecurity.ui.register.defaultRoleNames
* grails.plugin.springsecurity.ui.register.postRegisterUrl
* grails.plugin.springsecurity.ui.forgotPassword.emailBody
* grails.plugin.springsecurity.ui.forgotPassword.emailFrom
* grails.plugin.springsecurity.ui.forgotPassword.emailSubject
* grails.plugin.springsecurity.ui.forgotPassword.postResetUrl

See [Section 5|guide:userRegistration] and [Section 6|guide:forgotPassword] for more details on these attributes.

h4. CSS

The plugin defines its CSS styles in @web-app/css/spring-security-ui.css@ and most of the jQuery plugins have corresponding CSS files. These can be overridden by overriding the @springSecurityUI.gsp@ template and including your CSS file(s).

h4. Password Encryption

In recent versions of the Spring Security Core plugin, the "User" domain class is generated by the @s2-quickstart@ with code to automatically encrypt the password. This makes the code simpler (for example in controllers where you create users or update user passwords) but older generated classes don't have this generated code. This presents a problem for plugins like this one since it's not possible to reliably determine if the domain class encrypts the password or if you use the older approach of explicitly calling @springSecurityService.encodePassword()@.

The unfortunate consequence of mixing a newer domain class that does password encryption with controllers that call @springSecurityService.encodePassword()@ is the the passwords get double-encrypted, and users aren't able to login. So to get around this there's a configuration option you can set to tell this plugin's controllers whether to encrypt or not: @grails.plugin.springsecurity.ui.encodePassword@.

This option defaults to @false@, so if you have an older domain class that doesn't handle encryption just enable this plugin's encryption:

{code}
grails.plugin.springsecurity.ui.encodePassword = true
{code}

h4. Password Verification

By default the registration controller has rather strict requirements for valid passwords; they must be between 8 and 64 characters and must include at least one uppercase letter, at least one number, and at least one symbol from "!@#$%^&". You can customize these rules with these Config.groovy attributes:

{table}
*Property* | *Default Value*
grails.plugin.springsecurity. ui.password.minLength | 8
grails.plugin.springsecurity. ui.password.maxLength | 64
grails.plugin.springsecurity. ui.password.validationRegex | "^.\*(?=.\*\\\\\\d)(?=.\*\[a-zA-Z\])(?=.\*\[!\@#$%^&\]).\*$"
{table}

