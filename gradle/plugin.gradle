buildscript {
	repositories {
		maven { url 'https://repo.grails.org/grails/core' }
	}
	dependencies {
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
		classpath 'org.asciidoctor:asciidoctorj-epub3:1.5.0-alpha.6'
		classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11'
	}
}

apply from: 'gradle/common.gradle'

apply plugin: 'maven-publish'
apply plugin: 'spring-boot'
apply plugin: 'org.grails.grails-plugin'
apply plugin: 'org.asciidoctor.convert'

apply from: 'https://raw.githubusercontent.com/grails/grails-profile-repository/master/profiles/plugin/templates/grailsCentralPublishing.gradle'
apply from: 'https://raw.githubusercontent.com/grails/grails-profile-repository/master/profiles/plugin/templates/bintrayPublishing.gradle'

group = 'org.grails.plugins'
sourceCompatibility = targetCompatibility = 1.7

def setIfNotSet = { String name, value ->
	if (!project.ext.has(name)) {
		project.ext[name] = value
	}
}
setIfNotSet 'issueTrackerUrl', project.vcsUrl + '/issues'
setIfNotSet 'websiteUrl', project.vcsUrl

dependencies {
	provided 'javax.servlet:javax.servlet-api:3.1.0'
	provided 'org.grails:grails-dependencies'
	provided 'org.grails:grails-web-boot'
	provided 'org.springframework.boot:spring-boot-starter-logging'
}

def asciidoctorAttributes = [
	 copyright           : 'Apache License, Version 2.0',
	 docinfo1            : 'true',
	 doctype             : 'book',
	 encoding            : 'utf-8',
	'front-cover-image'  : 'image:cover.png[Front Cover,800,600]',
	 icons               : 'font',
	 id                  : project.name + ':' + project.version,
	 idprefix            : '',
	 idseparator         : '-',
	 lang                : 'en',
	 linkattrs           : true,
	 numbered            : '',
	 producer            : 'Asciidoctor',
	 revnumber           : project.version,
	 setanchors          : true,
	'source-highlighter' : 'prettify',
	 toc                 : 'left',
	 toc2                : '',
	 toclevels           : '2',
	 'imagesdir'		 : 'images',
]

import org.asciidoctor.gradle.AsciidoctorTask

tasks.withType(AsciidoctorTask) {
	attributes asciidoctorAttributes
	outputDir new File(buildDir, 'docs')
	separateOutputDirs = false
	sourceDir = file('src/docs')
	sources {
		include 'index.adoc'
	}
	resources {
		from (sourceDir) {
			include "images/**/*.png"
		}
		into './'
	}
}

task asciidoc(type: AsciidoctorTask, description: 'Generates single-page HTML, PDF, and EPUB3') {
	backends 'html5', 'pdf', 'epub3'
}

task docs(dependsOn: [asciidoc]) << {

	File dir = new File(buildDir, 'docs')
	['epub', 'pdf'].each { String ext ->
		File f = new File(dir, 'index.' + ext)
		if (f.exists()) {
			f.renameTo new File(dir, project.name + '-' + project.version + '.' + ext)
		}
	}

	new File(buildDir, 'docs/ghpages.html') << file('src/docs/index.tmpl').text.replaceAll('@VERSION@', project.version)

	copy {
		from 'src/docs'
		into new File(buildDir, 'docs').path
		include '**/*.png'
	}
}

